///////////////////////////////////////////////////////////////////////////////////////////////
QUICK SORT
///////////////////////////////////////////////////////////////////////////////////////////////

Análisando algoritmos de ordenamiento

[ ]
import math
import numpy as np
import pylab as pl
%matplotlib inline
Ordenamiento Quick Sort

[ ]
def quickSort(lista):
   quickSortH(lista,0,len(lista)-1)
​
def quickSortH(lista,primero,ultimo):
   if primero<ultimo:
​
       divisionp = particion(lista,primero,ultimo)
​
       quickSortH(lista,primero,divisionp-1)
       quickSortH(lista,divisionp+1,ultimo)
​
​
def particion(lista,primero,ultimo):
   pivote = lista[primero]
​
   izquierdap = primero+1
   derechap = ultimo
​
   done = False
   while not done:
​
       while izquierdap <= derechap and lista[izquierdap] <= pivote:
           izquierdap = izquierdap + 1
​
       while lista[derechap] >= pivote and derechap >= izquierdap:
           derechap = derechap -1
​
       if derechap < izquierdap:
           done = True
       else:
           temp = lista[izquierdap]
           lista[izquierdap] = lista[derechap]
           lista[derechap] = temp
​
   temp = lista[primero]
   lista[primero] = lista[derechap]
   lista[derechap] = temp
​
​
   return derechap
[ ]
A = np.random.permutation(range(0,10))
print (A)
quickSort(A)
print (A)

Correctitud

[ ]
def invariant(lista, original_lista):
    l1 = list(lista)
    l2 = list(original_lista)
    l2.sort()
    return l1 == l2
[ ]
print (invariant([1, 2, 3, 4, 5, 6, 7, 8, 9, 11],[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))
print (invariant([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))

Análisis del tiempo de ejecución

[ ]
class Counter:
    
    def __init__(self):
        self.steps = 0
​
    def reset(self):
        self.steps = 0
​
    def count(self):
        self.steps += 1
​
    def print_steps(self):
        print ("Number of steps =", self.steps)
        
def acct_quickSort(lista, acct):
   quickSortH(lista,0,len(lista)-1); acct.count()
​
def quickSortH(lista,primero,ultimo):
   if primero<ultimo:
​
       divisionp = particion(lista,primero,ultimo); acct.count()
​
       quickSortH(lista,primero,divisionp-1); acct.count()
       quickSortH(lista,divisionp+1,ultimo); acct.count()
​
​
def particion(lista,primero,ultimo):
   pivote = lista[primero]; acct.count()
​
   izquierdap = primero+1; acct.count()
   derechap = ultimo; acct.count()
​
   done = False; acct.count()
   while not done:
​
       while izquierdap <= derechap and lista[izquierdap] <= pivote:
           izquierdap = izquierdap + 1; acct.count()
​
       while lista[derechap] >= pivote and derechap >= izquierdap:
           derechap = derechap -1; acct.count()
​
       if derechap < izquierdap:
           done = True; acct.count()
       else:
           temp = lista[izquierdap]; acct.count()
           lista[izquierdap] = lista[derechap]; acct.count()
           lista[derechap] = temp; acct.count()
​
   temp = lista[primero]; acct.count()
   lista[primero] = lista[derechap]; acct.count()
   lista[derechap] = temp; acct.count()
​
​
   return derechap; acct.count()
[ ]
A = np.random.permutation(range(0,5))
acct = Counter()
acct_quickSort(A, acct)
acct.print_steps()

Análisis experimental

[ ]
import random as rnd
​
def exper_analysis(n):
    results = []
    acct = Counter()
    for i in range(n):
        l = list(range(i))
        rnd.shuffle(l)
        acct.reset()
        acct_quickSort(l, acct)
        results.append(acct.steps)
    return results
[ ]
print (exper_analysis(10))

[ ]
pl.clf()
x = np.arange(100)
y = np.array(exper_analysis(100))
pl.plot(x, y, 'k.')

///////////////////////////////////////////////////////////////////////////////////////////////
MERGE SORT
///////////////////////////////////////////////////////////////////////////////////////////////

Análisando algoritmos de ordenamiento

[ ]
import math
import numpy as np
import pylab as pl
%matplotlib inline
Ordenamiento Quick Sort

[ ]
def mergeSort(lista):
    print("dividiendo ",lista)
    if len(lista)>1:
        med = len(lista)//2
        izquierda = lista[:med]
        derecha = lista[med:]
​
        mergeSort(izquierda)
        mergeSort(derecha)
​
        i=0
        j=0
        k=0
        while i < len(izquierda) and j < len(derecha):
            if izquierda[i] < derecha[j]:
                lista[k]=izquierda[i]
                i=i+1
            else:
                lista[k]=derecha[j]
                j=j+1
            k=k+1
​
        while i < len(izquierda):
            lista[k]=izquierda[i]
            i=i+1
            k=k+1
​
        while j < len(derecha):
            lista[k]=derecha[j]
            j=j+1
            k=k+1
    print("fusionando ",lista)
​
lista = [21,24,84,54,56,95,58,75,10]
mergeSort(lista)
print(lista)
​

Correctitud

[ ]
def invariant(lista, original_lista):
    l1 = list(lista)
    l2 = list(original_lista)
    l2.sort()
    return l1 == l2
[ ]
print (invariant([1, 2, 3, 4, 5, 6, 7, 8, 9, 11],[1, 3, 4, 2, 5, 6, 7, 9, 8, 10]))
print (invariant([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))

Análisis del tiempo de ejecución

[ ]
class Counter:
    
    def __init__(self):
        self.steps = 0
​
    def reset(self):
        self.steps = 0
​
    def count(self):
        self.steps += 1
​
    def print_steps(self):
        print ("Number of steps =", self.steps)
        
def acct_mergeSort(lista, acct):
    print("dividiendo ",lista); acct.count()
    if len(lista)>1:
        med = len(lista)//2; acct.count()
        izquierda = lista[:med]; acct.count()
        derecha = lista[med:]; acct.count()
​
        mergeSort(izquierda); acct.count()
        mergeSort(derecha); acct.count()
​
        i=0; acct.count()
        j=0; acct.count()
        k=0; acct.count()
        while i < len(izquierda) and j < len(derecha):
            if izquierda[i] < derecha[j]:
                lista[k]=izquierda[i]; acct.count()
                i=i+1; acct.count()
            else:
                lista[k]=derecha[j]; acct.count()
                j=j+1; acct.count()
            k=k+1; acct.count()
​
        while i < len(izquierda):
            lista[k]=izquierda[i]; acct.count()
            i=i+1; acct.count()
            k=k+1; acct.count()
​
        while j < len(derecha):
            lista[k]=derecha[j]; acct.count()
            j=j+1; acct.count()
            k=k+1; acct.count()
    print("fusionando ",lista); acct.count()
[ ]
A = np.random.permutation(range(10))
acct = Counter()
acct_mergeSort(A, acct)
acct.print_steps()

Análisis experimental

[ ]
import random as rnd
​
def exper_analysis(n):
    results = []
    acct = Counter()
    for i in range(n):
        l = list(range(i))
        rnd.shuffle(l)
        acct.reset()
        acct_mergeSort(l, acct)
        results.append(acct.steps)
    return results
​
[ ]
print (exper_analysis(10))

[ ]
pl.clf()
x = np.arange(100)
y = np.array(exper_analysis(100))
pl.plot(x, y, 'k.')

